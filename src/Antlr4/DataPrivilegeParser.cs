//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from DataPrivilege.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class DataPrivilegeParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, LINECOMMENT=8, 
		COMMENT=9, AND=10, OR=11, ASC=12, DESC=13, BETWEEN=14, EXISTS=15, IN=16, 
		IS=17, NULL=18, LIKE=19, NOT=20, WHERE=21, SELECT=22, FROM=23, ORDER=24, 
		BY=25, GETDATE=26, EQUAL=27, GREATER=28, LESS=29, EXCLAMATION=30, DOT=31, 
		ID=32, AS=33, STRING=34, DECIMAL=35, BINARY=36, FLOAT=37, REAL=38, S=39;
	public const int
		RULE_comparisonOperator = 0, RULE_expression = 1, RULE_expressionList = 2, 
		RULE_columnElem = 3, RULE_simpleSubquery = 4, RULE_tableName = 5, RULE_searchConditionAnd = 6, 
		RULE_searchConditionNot = 7, RULE_searchCondition = 8, RULE_customField = 9, 
		RULE_numericExpression = 10, RULE_stringExpression = 11, RULE_nullExpression = 12, 
		RULE_constantExpression = 13, RULE_getDateExpression = 14, RULE_existsExpression = 15, 
		RULE_comparisonExpression = 16, RULE_betweenAndExpression = 17, RULE_inExpression = 18, 
		RULE_likeExpression = 19, RULE_isNullExpression = 20, RULE_predicate = 21;
	public static readonly string[] ruleNames = {
		"comparisonOperator", "expression", "expressionList", "columnElem", "simpleSubquery", 
		"tableName", "searchConditionAnd", "searchConditionNot", "searchCondition", 
		"customField", "numericExpression", "stringExpression", "nullExpression", 
		"constantExpression", "getDateExpression", "existsExpression", "comparisonExpression", 
		"betweenAndExpression", "inExpression", "likeExpression", "isNullExpression", 
		"predicate"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'{'", "'}'", "'+'", "'-'", "'('", "')'", null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "'='", "'>'", "'<'", "'!'", "'.'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "LINECOMMENT", "COMMENT", 
		"AND", "OR", "ASC", "DESC", "BETWEEN", "EXISTS", "IN", "IS", "NULL", "LIKE", 
		"NOT", "WHERE", "SELECT", "FROM", "ORDER", "BY", "GETDATE", "EQUAL", "GREATER", 
		"LESS", "EXCLAMATION", "DOT", "ID", "AS", "STRING", "DECIMAL", "BINARY", 
		"FLOAT", "REAL", "S"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "DataPrivilege.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static DataPrivilegeParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DataPrivilegeParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DataPrivilegeParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ComparisonOperatorContext : ParserRuleContext {
		public ITerminalNode EQUAL() { return GetToken(DataPrivilegeParser.EQUAL, 0); }
		public ITerminalNode GREATER() { return GetToken(DataPrivilegeParser.GREATER, 0); }
		public ITerminalNode LESS() { return GetToken(DataPrivilegeParser.LESS, 0); }
		public ITerminalNode EXCLAMATION() { return GetToken(DataPrivilegeParser.EXCLAMATION, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonOperator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDataPrivilegeVisitor<TResult> typedVisitor = visitor as IDataPrivilegeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonOperatorContext comparisonOperator() {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(Context, State);
		EnterRule(_localctx, 0, RULE_comparisonOperator);
		try {
			State = 59;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 44; Match(EQUAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 45; Match(GREATER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 46; Match(LESS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 47; Match(LESS);
				State = 48; Match(EQUAL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 49; Match(GREATER);
				State = 50; Match(EQUAL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 51; Match(LESS);
				State = 52; Match(GREATER);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 53; Match(EXCLAMATION);
				State = 54; Match(EQUAL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 55; Match(EXCLAMATION);
				State = 56; Match(GREATER);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 57; Match(EXCLAMATION);
				State = 58; Match(LESS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ColumnElemContext columnElem() {
			return GetRuleContext<ColumnElemContext>(0);
		}
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public CustomFieldContext customField() {
			return GetRuleContext<CustomFieldContext>(0);
		}
		public GetDateExpressionContext getDateExpression() {
			return GetRuleContext<GetDateExpressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDataPrivilegeVisitor<TResult> typedVisitor = visitor as IDataPrivilegeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		try {
			State = 65;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 61; columnElem();
				}
				break;
			case T__3:
			case T__4:
			case NULL:
			case STRING:
			case DECIMAL:
			case BINARY:
			case FLOAT:
			case REAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 62; constantExpression();
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 3);
				{
				State = 63; customField();
				}
				break;
			case GETDATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 64; getDateExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDataPrivilegeVisitor<TResult> typedVisitor = visitor as IDataPrivilegeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 4, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; expression();
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 68; Match(T__0);
				State = 69; expression();
				}
				}
				State = 74;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnElemContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(DataPrivilegeParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(DataPrivilegeParser.ID, i);
		}
		public ITerminalNode DOT() { return GetToken(DataPrivilegeParser.DOT, 0); }
		public ColumnElemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnElem; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDataPrivilegeVisitor<TResult> typedVisitor = visitor as IDataPrivilegeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColumnElem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ColumnElemContext columnElem() {
		ColumnElemContext _localctx = new ColumnElemContext(Context, State);
		EnterRule(_localctx, 6, RULE_columnElem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 75; Match(ID);
				State = 76; Match(DOT);
				}
				break;
			}
			State = 79; Match(ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleSubqueryContext : ParserRuleContext {
		public SearchConditionContext where;
		public ITerminalNode SELECT() { return GetToken(DataPrivilegeParser.SELECT, 0); }
		public ColumnElemContext columnElem() {
			return GetRuleContext<ColumnElemContext>(0);
		}
		public ITerminalNode FROM() { return GetToken(DataPrivilegeParser.FROM, 0); }
		public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public ITerminalNode WHERE() { return GetToken(DataPrivilegeParser.WHERE, 0); }
		public SearchConditionContext searchCondition() {
			return GetRuleContext<SearchConditionContext>(0);
		}
		public SimpleSubqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleSubquery; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDataPrivilegeVisitor<TResult> typedVisitor = visitor as IDataPrivilegeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleSubquery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleSubqueryContext simpleSubquery() {
		SimpleSubqueryContext _localctx = new SimpleSubqueryContext(Context, State);
		EnterRule(_localctx, 8, RULE_simpleSubquery);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(SELECT);
			State = 82; columnElem();
			State = 83; Match(FROM);
			State = 84; tableName();
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 85; Match(WHERE);
				State = 86; _localctx.where = searchCondition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableNameContext : ParserRuleContext {
		public ITerminalNode[] ID() { return GetTokens(DataPrivilegeParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(DataPrivilegeParser.ID, i);
		}
		public ITerminalNode AS() { return GetToken(DataPrivilegeParser.AS, 0); }
		public TableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableName; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDataPrivilegeVisitor<TResult> typedVisitor = visitor as IDataPrivilegeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTableName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TableNameContext tableName() {
		TableNameContext _localctx = new TableNameContext(Context, State);
		EnterRule(_localctx, 10, RULE_tableName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; Match(ID);
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 90; Match(AS);
				}
			}

			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ID) {
				{
				State = 93; Match(ID);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SearchConditionAndContext : ParserRuleContext {
		public SearchConditionNotContext[] searchConditionNot() {
			return GetRuleContexts<SearchConditionNotContext>();
		}
		public SearchConditionNotContext searchConditionNot(int i) {
			return GetRuleContext<SearchConditionNotContext>(i);
		}
		public ITerminalNode[] AND() { return GetTokens(DataPrivilegeParser.AND); }
		public ITerminalNode AND(int i) {
			return GetToken(DataPrivilegeParser.AND, i);
		}
		public SearchConditionAndContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_searchConditionAnd; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDataPrivilegeVisitor<TResult> typedVisitor = visitor as IDataPrivilegeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearchConditionAnd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SearchConditionAndContext searchConditionAnd() {
		SearchConditionAndContext _localctx = new SearchConditionAndContext(Context, State);
		EnterRule(_localctx, 12, RULE_searchConditionAnd);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96; searchConditionNot();
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AND) {
				{
				{
				State = 97; Match(AND);
				State = 98; searchConditionNot();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SearchConditionNotContext : ParserRuleContext {
		public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(DataPrivilegeParser.NOT, 0); }
		public SearchConditionNotContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_searchConditionNot; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDataPrivilegeVisitor<TResult> typedVisitor = visitor as IDataPrivilegeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearchConditionNot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SearchConditionNotContext searchConditionNot() {
		SearchConditionNotContext _localctx = new SearchConditionNotContext(Context, State);
		EnterRule(_localctx, 14, RULE_searchConditionNot);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 104; Match(NOT);
				}
				break;
			}
			State = 107; predicate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SearchConditionContext : ParserRuleContext {
		public SearchConditionAndContext[] searchConditionAnd() {
			return GetRuleContexts<SearchConditionAndContext>();
		}
		public SearchConditionAndContext searchConditionAnd(int i) {
			return GetRuleContext<SearchConditionAndContext>(i);
		}
		public ITerminalNode[] OR() { return GetTokens(DataPrivilegeParser.OR); }
		public ITerminalNode OR(int i) {
			return GetToken(DataPrivilegeParser.OR, i);
		}
		public SearchConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_searchCondition; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDataPrivilegeVisitor<TResult> typedVisitor = visitor as IDataPrivilegeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearchCondition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SearchConditionContext searchCondition() {
		SearchConditionContext _localctx = new SearchConditionContext(Context, State);
		EnterRule(_localctx, 16, RULE_searchCondition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109; searchConditionAnd();
			State = 114;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OR) {
				{
				{
				State = 110; Match(OR);
				State = 111; searchConditionAnd();
				}
				}
				State = 116;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CustomFieldContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(DataPrivilegeParser.ID, 0); }
		public CustomFieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_customField; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDataPrivilegeVisitor<TResult> typedVisitor = visitor as IDataPrivilegeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCustomField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CustomFieldContext customField() {
		CustomFieldContext _localctx = new CustomFieldContext(Context, State);
		EnterRule(_localctx, 18, RULE_customField);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117; Match(T__1);
			State = 118; Match(ID);
			State = 119; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericExpressionContext : ParserRuleContext {
		public ITerminalNode DECIMAL() { return GetToken(DataPrivilegeParser.DECIMAL, 0); }
		public ITerminalNode BINARY() { return GetToken(DataPrivilegeParser.BINARY, 0); }
		public ITerminalNode REAL() { return GetToken(DataPrivilegeParser.REAL, 0); }
		public ITerminalNode FLOAT() { return GetToken(DataPrivilegeParser.FLOAT, 0); }
		public NumericExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDataPrivilegeVisitor<TResult> typedVisitor = visitor as IDataPrivilegeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumericExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumericExpressionContext numericExpression() {
		NumericExpressionContext _localctx = new NumericExpressionContext(Context, State);
		EnterRule(_localctx, 20, RULE_numericExpression);
		int _la;
		try {
			State = 130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 122;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__3 || _la==T__4) {
					{
					State = 121;
					_la = TokenStream.LA(1);
					if ( !(_la==T__3 || _la==T__4) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 124; Match(DECIMAL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 125; Match(BINARY);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 127;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__3 || _la==T__4) {
					{
					State = 126;
					_la = TokenStream.LA(1);
					if ( !(_la==T__3 || _la==T__4) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 129;
				_la = TokenStream.LA(1);
				if ( !(_la==FLOAT || _la==REAL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringExpressionContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(DataPrivilegeParser.STRING, 0); }
		public StringExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDataPrivilegeVisitor<TResult> typedVisitor = visitor as IDataPrivilegeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StringExpressionContext stringExpression() {
		StringExpressionContext _localctx = new StringExpressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_stringExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 132; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullExpressionContext : ParserRuleContext {
		public ITerminalNode NULL() { return GetToken(DataPrivilegeParser.NULL, 0); }
		public NullExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDataPrivilegeVisitor<TResult> typedVisitor = visitor as IDataPrivilegeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNullExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NullExpressionContext nullExpression() {
		NullExpressionContext _localctx = new NullExpressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_nullExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		public StringExpressionContext stringExpression() {
			return GetRuleContext<StringExpressionContext>(0);
		}
		public NumericExpressionContext numericExpression() {
			return GetRuleContext<NumericExpressionContext>(0);
		}
		public NullExpressionContext nullExpression() {
			return GetRuleContext<NullExpressionContext>(0);
		}
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDataPrivilegeVisitor<TResult> typedVisitor = visitor as IDataPrivilegeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext constantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_constantExpression);
		try {
			State = 139;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 136; stringExpression();
				}
				break;
			case T__3:
			case T__4:
			case DECIMAL:
			case BINARY:
			case FLOAT:
			case REAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 137; numericExpression();
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 138; nullExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetDateExpressionContext : ParserRuleContext {
		public ITerminalNode GETDATE() { return GetToken(DataPrivilegeParser.GETDATE, 0); }
		public GetDateExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getDateExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDataPrivilegeVisitor<TResult> typedVisitor = visitor as IDataPrivilegeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetDateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GetDateExpressionContext getDateExpression() {
		GetDateExpressionContext _localctx = new GetDateExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_getDateExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 141; Match(GETDATE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExistsExpressionContext : ParserRuleContext {
		public ITerminalNode EXISTS() { return GetToken(DataPrivilegeParser.EXISTS, 0); }
		public SimpleSubqueryContext simpleSubquery() {
			return GetRuleContext<SimpleSubqueryContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(DataPrivilegeParser.NOT, 0); }
		public ExistsExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_existsExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDataPrivilegeVisitor<TResult> typedVisitor = visitor as IDataPrivilegeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExistsExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExistsExpressionContext existsExpression() {
		ExistsExpressionContext _localctx = new ExistsExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_existsExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 143; Match(NOT);
				}
			}

			State = 146; Match(EXISTS);
			State = 147; Match(T__5);
			State = 148; simpleSubquery();
			State = 149; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComparisonExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return GetRuleContext<ComparisonOperatorContext>(0);
		}
		public ComparisonExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comparisonExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDataPrivilegeVisitor<TResult> typedVisitor = visitor as IDataPrivilegeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ComparisonExpressionContext comparisonExpression() {
		ComparisonExpressionContext _localctx = new ComparisonExpressionContext(Context, State);
		EnterRule(_localctx, 32, RULE_comparisonExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 151; expression();
			State = 152; comparisonOperator();
			State = 153; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BetweenAndExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode BETWEEN() { return GetToken(DataPrivilegeParser.BETWEEN, 0); }
		public ITerminalNode AND() { return GetToken(DataPrivilegeParser.AND, 0); }
		public ITerminalNode NOT() { return GetToken(DataPrivilegeParser.NOT, 0); }
		public BetweenAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_betweenAndExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDataPrivilegeVisitor<TResult> typedVisitor = visitor as IDataPrivilegeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBetweenAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BetweenAndExpressionContext betweenAndExpression() {
		BetweenAndExpressionContext _localctx = new BetweenAndExpressionContext(Context, State);
		EnterRule(_localctx, 34, RULE_betweenAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; expression();
			State = 157;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 156; Match(NOT);
				}
			}

			State = 159; Match(BETWEEN);
			State = 160; expression();
			State = 161; Match(AND);
			State = 162; expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IN() { return GetToken(DataPrivilegeParser.IN, 0); }
		public SimpleSubqueryContext simpleSubquery() {
			return GetRuleContext<SimpleSubqueryContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode NOT() { return GetToken(DataPrivilegeParser.NOT, 0); }
		public InExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDataPrivilegeVisitor<TResult> typedVisitor = visitor as IDataPrivilegeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InExpressionContext inExpression() {
		InExpressionContext _localctx = new InExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_inExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; expression();
			State = 166;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 165; Match(NOT);
				}
			}

			State = 168; Match(IN);
			State = 169; Match(T__5);
			State = 172;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				{
				State = 170; simpleSubquery();
				}
				break;
			case T__1:
			case T__3:
			case T__4:
			case NULL:
			case GETDATE:
			case ID:
			case STRING:
			case DECIMAL:
			case BINARY:
			case FLOAT:
			case REAL:
				{
				State = 171; expressionList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 174; Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LikeExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode LIKE() { return GetToken(DataPrivilegeParser.LIKE, 0); }
		public ITerminalNode STRING() { return GetToken(DataPrivilegeParser.STRING, 0); }
		public ITerminalNode NOT() { return GetToken(DataPrivilegeParser.NOT, 0); }
		public LikeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_likeExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDataPrivilegeVisitor<TResult> typedVisitor = visitor as IDataPrivilegeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLikeExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LikeExpressionContext likeExpression() {
		LikeExpressionContext _localctx = new LikeExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_likeExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 176; expression();
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 177; Match(NOT);
				}
			}

			State = 180; Match(LIKE);
			State = 181; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsNullExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IS() { return GetToken(DataPrivilegeParser.IS, 0); }
		public ITerminalNode NULL() { return GetToken(DataPrivilegeParser.NULL, 0); }
		public ITerminalNode NOT() { return GetToken(DataPrivilegeParser.NOT, 0); }
		public IsNullExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isNullExpression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDataPrivilegeVisitor<TResult> typedVisitor = visitor as IDataPrivilegeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIsNullExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IsNullExpressionContext isNullExpression() {
		IsNullExpressionContext _localctx = new IsNullExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_isNullExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183; expression();
			State = 184; Match(IS);
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT) {
				{
				State = 185; Match(NOT);
				}
			}

			State = 188; Match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public ExistsExpressionContext existsExpression() {
			return GetRuleContext<ExistsExpressionContext>(0);
		}
		public ComparisonExpressionContext comparisonExpression() {
			return GetRuleContext<ComparisonExpressionContext>(0);
		}
		public BetweenAndExpressionContext betweenAndExpression() {
			return GetRuleContext<BetweenAndExpressionContext>(0);
		}
		public InExpressionContext inExpression() {
			return GetRuleContext<InExpressionContext>(0);
		}
		public LikeExpressionContext likeExpression() {
			return GetRuleContext<LikeExpressionContext>(0);
		}
		public IsNullExpressionContext isNullExpression() {
			return GetRuleContext<IsNullExpressionContext>(0);
		}
		public SearchConditionContext searchCondition() {
			return GetRuleContext<SearchConditionContext>(0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDataPrivilegeVisitor<TResult> typedVisitor = visitor as IDataPrivilegeVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 42, RULE_predicate);
		try {
			State = 200;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 190; existsExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 191; comparisonExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 192; betweenAndExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 193; inExpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 194; likeExpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 195; isNullExpression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 196; Match(T__5);
				State = 197; searchCondition();
				State = 198; Match(T__6);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ')', '\xCD', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', '>', '\n', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', 
		'\x3', '\x44', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\a', '\x4', 'I', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 'L', '\v', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'P', '\n', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 'Z', '\n', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x5', '\a', '^', '\n', '\a', '\x3', '\a', '\x5', '\a', '\x61', 
		'\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\x66', 
		'\n', '\b', '\f', '\b', '\xE', '\b', 'i', '\v', '\b', '\x3', '\t', '\x5', 
		'\t', 'l', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\a', '\n', 's', '\n', '\n', '\f', '\n', '\xE', '\n', 'v', 
		'\v', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\f', '\x5', '\f', '}', '\n', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x5', '\f', '\x82', '\n', '\f', '\x3', '\f', '\x5', '\f', '\x85', '\n', 
		'\f', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x8E', '\n', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x5', '\x11', '\x93', '\n', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', 
		'\x3', '\x13', '\x5', '\x13', '\xA0', '\n', '\x13', '\x3', '\x13', '\x3', 
		'\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', 
		'\x14', '\x5', '\x14', '\xA9', '\n', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xAF', '\n', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\xB5', 
		'\n', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\xBD', '\n', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x17', '\x5', '\x17', '\xCB', '\n', '\x17', '\x3', '\x17', 
		'\x2', '\x2', '\x18', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', 
		'\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', 
		'&', '(', '*', ',', '\x2', '\x4', '\x3', '\x2', '\x6', '\a', '\x3', '\x2', 
		'\'', '(', '\x2', '\xDB', '\x2', '=', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x6', '\x45', '\x3', '\x2', '\x2', 
		'\x2', '\b', 'O', '\x3', '\x2', '\x2', '\x2', '\n', 'S', '\x3', '\x2', 
		'\x2', '\x2', '\f', '[', '\x3', '\x2', '\x2', '\x2', '\xE', '\x62', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'k', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'o', '\x3', '\x2', '\x2', '\x2', '\x14', 'w', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x84', '\x3', '\x2', '\x2', '\x2', '\x18', '\x86', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x88', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x8D', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x8F', '\x3', '\x2', '\x2', '\x2', 
		' ', '\x92', '\x3', '\x2', '\x2', '\x2', '\"', '\x99', '\x3', '\x2', '\x2', 
		'\x2', '$', '\x9D', '\x3', '\x2', '\x2', '\x2', '&', '\xA6', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xB2', '\x3', '\x2', '\x2', '\x2', '*', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xCA', '\x3', '\x2', '\x2', '\x2', '.', '>', 
		'\a', '\x1D', '\x2', '\x2', '/', '>', '\a', '\x1E', '\x2', '\x2', '\x30', 
		'>', '\a', '\x1F', '\x2', '\x2', '\x31', '\x32', '\a', '\x1F', '\x2', 
		'\x2', '\x32', '>', '\a', '\x1D', '\x2', '\x2', '\x33', '\x34', '\a', 
		'\x1E', '\x2', '\x2', '\x34', '>', '\a', '\x1D', '\x2', '\x2', '\x35', 
		'\x36', '\a', '\x1F', '\x2', '\x2', '\x36', '>', '\a', '\x1E', '\x2', 
		'\x2', '\x37', '\x38', '\a', ' ', '\x2', '\x2', '\x38', '>', '\a', '\x1D', 
		'\x2', '\x2', '\x39', ':', '\a', ' ', '\x2', '\x2', ':', '>', '\a', '\x1E', 
		'\x2', '\x2', ';', '<', '\a', ' ', '\x2', '\x2', '<', '>', '\a', '\x1F', 
		'\x2', '\x2', '=', '.', '\x3', '\x2', '\x2', '\x2', '=', '/', '\x3', '\x2', 
		'\x2', '\x2', '=', '\x30', '\x3', '\x2', '\x2', '\x2', '=', '\x31', '\x3', 
		'\x2', '\x2', '\x2', '=', '\x33', '\x3', '\x2', '\x2', '\x2', '=', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '=', '\x37', '\x3', '\x2', '\x2', '\x2', '=', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '=', ';', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x3', '\x3', '\x2', '\x2', '\x2', '?', '\x44', '\x5', '\b', '\x5', 
		'\x2', '@', '\x44', '\x5', '\x1C', '\xF', '\x2', '\x41', '\x44', '\x5', 
		'\x14', '\v', '\x2', '\x42', '\x44', '\x5', '\x1E', '\x10', '\x2', '\x43', 
		'?', '\x3', '\x2', '\x2', '\x2', '\x43', '@', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x41', '\x3', '\x2', '\x2', '\x2', '\x43', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x44', '\x5', '\x3', '\x2', '\x2', '\x2', '\x45', 'J', 
		'\x5', '\x4', '\x3', '\x2', '\x46', 'G', '\a', '\x3', '\x2', '\x2', 'G', 
		'I', '\x5', '\x4', '\x3', '\x2', 'H', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'I', 'L', '\x3', '\x2', '\x2', '\x2', 'J', 'H', '\x3', '\x2', '\x2', '\x2', 
		'J', 'K', '\x3', '\x2', '\x2', '\x2', 'K', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\a', '\"', '\x2', 
		'\x2', 'N', 'P', '\a', '!', '\x2', '\x2', 'O', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'O', 'P', '\x3', '\x2', '\x2', '\x2', 'P', 'Q', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'R', '\a', '\"', '\x2', '\x2', 'R', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\a', '\x18', '\x2', '\x2', 'T', 'U', '\x5', '\b', '\x5', 
		'\x2', 'U', 'V', '\a', '\x19', '\x2', '\x2', 'V', 'Y', '\x5', '\f', '\a', 
		'\x2', 'W', 'X', '\a', '\x17', '\x2', '\x2', 'X', 'Z', '\x5', '\x12', 
		'\n', '\x2', 'Y', 'W', '\x3', '\x2', '\x2', '\x2', 'Y', 'Z', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\v', '\x3', '\x2', '\x2', '\x2', '[', ']', '\a', '\"', 
		'\x2', '\x2', '\\', '^', '\a', '#', '\x2', '\x2', ']', '\\', '\x3', '\x2', 
		'\x2', '\x2', ']', '^', '\x3', '\x2', '\x2', '\x2', '^', '`', '\x3', '\x2', 
		'\x2', '\x2', '_', '\x61', '\a', '\"', '\x2', '\x2', '`', '_', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x61', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x62', 'g', '\x5', '\x10', '\t', '\x2', 
		'\x63', '\x64', '\a', '\f', '\x2', '\x2', '\x64', '\x66', '\x5', '\x10', 
		'\t', '\x2', '\x65', '\x63', '\x3', '\x2', '\x2', '\x2', '\x66', 'i', 
		'\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', '\x2', '\x2', 'g', 
		'h', '\x3', '\x2', '\x2', '\x2', 'h', '\xF', '\x3', '\x2', '\x2', '\x2', 
		'i', 'g', '\x3', '\x2', '\x2', '\x2', 'j', 'l', '\a', '\x16', '\x2', '\x2', 
		'k', 'j', '\x3', '\x2', '\x2', '\x2', 'k', 'l', '\x3', '\x2', '\x2', '\x2', 
		'l', 'm', '\x3', '\x2', '\x2', '\x2', 'm', 'n', '\x5', ',', '\x17', '\x2', 
		'n', '\x11', '\x3', '\x2', '\x2', '\x2', 'o', 't', '\x5', '\xE', '\b', 
		'\x2', 'p', 'q', '\a', '\r', '\x2', '\x2', 'q', 's', '\x5', '\xE', '\b', 
		'\x2', 'r', 'p', '\x3', '\x2', '\x2', '\x2', 's', 'v', '\x3', '\x2', '\x2', 
		'\x2', 't', 'r', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\x3', '\x2', '\x2', 
		'\x2', 'u', '\x13', '\x3', '\x2', '\x2', '\x2', 'v', 't', '\x3', '\x2', 
		'\x2', '\x2', 'w', 'x', '\a', '\x4', '\x2', '\x2', 'x', 'y', '\a', '\"', 
		'\x2', '\x2', 'y', 'z', '\a', '\x5', '\x2', '\x2', 'z', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '{', '}', '\t', '\x2', '\x2', '\x2', '|', '{', '\x3', 
		'\x2', '\x2', '\x2', '|', '}', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', 
		'\x2', '\x2', '\x2', '~', '\x85', '\a', '%', '\x2', '\x2', '\x7F', '\x85', 
		'\a', '&', '\x2', '\x2', '\x80', '\x82', '\t', '\x2', '\x2', '\x2', '\x81', 
		'\x80', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x83', '\x3', '\x2', '\x2', '\x2', '\x83', '\x85', '\t', 
		'\x3', '\x2', '\x2', '\x84', '|', '\x3', '\x2', '\x2', '\x2', '\x84', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x84', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x85', '\x17', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\a', 
		'$', '\x2', '\x2', '\x87', '\x19', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x89', '\a', '\x14', '\x2', '\x2', '\x89', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x8A', '\x8E', '\x5', '\x18', '\r', '\x2', '\x8B', '\x8E', '\x5', 
		'\x16', '\f', '\x2', '\x8C', '\x8E', '\x5', '\x1A', '\xE', '\x2', '\x8D', 
		'\x8A', '\x3', '\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x8D', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x8F', '\x90', '\a', '\x1C', '\x2', '\x2', '\x90', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x91', '\x93', '\a', '\x16', '\x2', 
		'\x2', '\x92', '\x91', '\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x94', '\x3', '\x2', '\x2', '\x2', '\x94', 
		'\x95', '\a', '\x11', '\x2', '\x2', '\x95', '\x96', '\a', '\b', '\x2', 
		'\x2', '\x96', '\x97', '\x5', '\n', '\x6', '\x2', '\x97', '\x98', '\a', 
		'\t', '\x2', '\x2', '\x98', '!', '\x3', '\x2', '\x2', '\x2', '\x99', '\x9A', 
		'\x5', '\x4', '\x3', '\x2', '\x9A', '\x9B', '\x5', '\x2', '\x2', '\x2', 
		'\x9B', '\x9C', '\x5', '\x4', '\x3', '\x2', '\x9C', '#', '\x3', '\x2', 
		'\x2', '\x2', '\x9D', '\x9F', '\x5', '\x4', '\x3', '\x2', '\x9E', '\xA0', 
		'\a', '\x16', '\x2', '\x2', '\x9F', '\x9E', '\x3', '\x2', '\x2', '\x2', 
		'\x9F', '\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '\xA1', '\xA2', '\a', '\x10', '\x2', '\x2', '\xA2', '\xA3', 
		'\x5', '\x4', '\x3', '\x2', '\xA3', '\xA4', '\a', '\f', '\x2', '\x2', 
		'\xA4', '\xA5', '\x5', '\x4', '\x3', '\x2', '\xA5', '%', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\xA8', '\x5', '\x4', '\x3', '\x2', '\xA7', '\xA9', 
		'\a', '\x16', '\x2', '\x2', '\xA8', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\xAB', '\a', '\x12', '\x2', '\x2', '\xAB', '\xAE', 
		'\a', '\b', '\x2', '\x2', '\xAC', '\xAF', '\x5', '\n', '\x6', '\x2', '\xAD', 
		'\xAF', '\x5', '\x6', '\x4', '\x2', '\xAE', '\xAC', '\x3', '\x2', '\x2', 
		'\x2', '\xAE', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\x3', 
		'\x2', '\x2', '\x2', '\xB0', '\xB1', '\a', '\t', '\x2', '\x2', '\xB1', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\xB2', '\xB4', '\x5', '\x4', '\x3', 
		'\x2', '\xB3', '\xB5', '\a', '\x16', '\x2', '\x2', '\xB4', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', '\xB5', 
		'\xB6', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB7', '\a', '\x15', '\x2', 
		'\x2', '\xB7', '\xB8', '\a', '$', '\x2', '\x2', '\xB8', ')', '\x3', '\x2', 
		'\x2', '\x2', '\xB9', '\xBA', '\x5', '\x4', '\x3', '\x2', '\xBA', '\xBC', 
		'\a', '\x13', '\x2', '\x2', '\xBB', '\xBD', '\a', '\x16', '\x2', '\x2', 
		'\xBC', '\xBB', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', '\x3', '\x2', 
		'\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xBF', 
		'\a', '\x14', '\x2', '\x2', '\xBF', '+', '\x3', '\x2', '\x2', '\x2', '\xC0', 
		'\xCB', '\x5', ' ', '\x11', '\x2', '\xC1', '\xCB', '\x5', '\"', '\x12', 
		'\x2', '\xC2', '\xCB', '\x5', '$', '\x13', '\x2', '\xC3', '\xCB', '\x5', 
		'&', '\x14', '\x2', '\xC4', '\xCB', '\x5', '(', '\x15', '\x2', '\xC5', 
		'\xCB', '\x5', '*', '\x16', '\x2', '\xC6', '\xC7', '\a', '\b', '\x2', 
		'\x2', '\xC7', '\xC8', '\x5', '\x12', '\n', '\x2', '\xC8', '\xC9', '\a', 
		'\t', '\x2', '\x2', '\xC9', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xC0', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\xCA', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\xCA', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xCA', 
		'\xC5', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xC6', '\x3', '\x2', '\x2', 
		'\x2', '\xCB', '-', '\x3', '\x2', '\x2', '\x2', '\x17', '=', '\x43', 'J', 
		'O', 'Y', ']', '`', 'g', 'k', 't', '|', '\x81', '\x84', '\x8D', '\x92', 
		'\x9F', '\xA8', '\xAE', '\xB4', '\xBC', '\xCA',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
